#!/usr/bin/env python
##################################
# make_run_lists
#  author: Matt Mottram
#          m.mottram@sussex.ac.uk
#
# Script to make production lists from 
# the benchmarking database and the 
# mac/production directory of a selected
# version of rat.  
#
# Background numbers (<int/ext)_n_year)
# should be updated to reflect the latest
# background expectations.
#
# Must first have bench/submitter/src in
# your PYTHONPATH
#
##################################

import os 
import copy
import math
import optparse
import getpass
import sys
import common
import Database

############################
#THE MAX SIZES AND TIMES:
_kB = 1024
_MB = _kB*1024
_GB = _MB*1024
max_size = 1.6*_GB
max_time = 20*3600

warn_size = 1024 * _GB
error_size = 5 * 1024 * _GB
warn_time = 1800 * 3600.
error_time = 9000 * 3600. 


basedir = None
rat_version = None
db = None

def get_request(mac_dir, rat_version, phase, module_prefix):
    lines = [] # lines describing the job, to output to a file
    for fname in os.listdir(os.path.join(mac_dir, phase)):
        ev_size, ev_time, n_ev = get_db_results([rat_version, phase, fname])
        if ev_size:
            ev_per_run, n_run, size_run, time_run = get_macro_info(ev_size, ev_time, n_ev)
            total_time = ev_time * n_ev
            total_size = ev_size * n_ev
            if (total_size > error_size or total_size > warn_size) or \
                    (total_time > error_time or total_time > warn_time):
                print "Time too long or size too large, skipping:", phase, fname, n_ev
                print "time:", total_time/3600
                print "size:", total_size/_GB      
                include = raw_input("Run anyway? [y/N]: ")
                if include!="y" and include!="Y":
                    continue
                else:
                    print "including!"          
            mod_name = module_prefix + class_from_mac(fname)
            lines.append('"%s":{"n_ev":%s, "ev_per_run":%s},\n'%(mod_name, int(n_ev), ev_per_run))
    return lines
            

def get_n_events_water(fname, rat_version):    
    print "\n\n=======WATER=========\n\n"
    fout = file(fname, "w")
    fout.write('{\n')
    fout.write('"rat_v": "%s",\n'%rat_version)
    fout.write('"modules" : {\n')
    lines = get_request(basedir, rat_version, 'water', 'Water')
    for i, line in enumerate(lines):
        if i == len(lines)-1:
            line = line[:-2] # remove final comma
            line = line + '\n' 
        fout.write(line)
    fout.write("}\n")
    fout.write("}\n")
    fout.close()

def get_n_events_solar(fname, rat_version):    
    print "\n\n=======SOLAR=========\n\n"
    fout = file(fname, "w")
    fout.write('{\n')
    fout.write('"rat_v": "%s",\n'%rat_version)
    fout.write('"modules" : {\n')
    lines = get_request(basedir, rat_version, 'solar', 'Solar')
    for i, line in enumerate(lines):
        if i == len(lines)-1:
            line = line[:-2] # remove final comma
            line = line + '\n' 
        fout.write(line)
    fout.write("}\n")
    fout.write("}\n")
    fout.close()

def get_n_events_te(fname, rat_version):    
    print "\n\n=======TE130=========\n\n"
    fout = file(fname, "w")
    fout.write('{\n')
    fout.write('"rat_v": "%s",\n'%rat_version)
    fout.write('"modules" : {\n')
    lines = get_request(basedir, rat_version, 'teloaded', 'TeLoaded')
    for i, line in enumerate(lines):
        if i == len(lines)-1:
            line = line[:-2] # remove final comma
            line = line + '\n' 
        fout.write(line)
    fout.write("}\n")
    fout.write("}\n")
    fout.close()
        
def get_macro_info(ev_size, ev_time, n_ev):
    """Calculate the number of events per macro blah blah blah
    """
    ev_file_size = float(max_size) / ev_size
    ev_file_time = float(max_time) / ev_time
    ev_per_run = ev_file_size
    if ev_file_size>ev_file_time:
        ev_per_run = ev_file_time
    #nearest 10k if more than 10k
    if ev_per_run>1e4:
        ev_per_run = int(ev_per_run/1e4) * 10000
    ev_per_run = int(ev_per_run)
    n_runs = n_ev/ev_per_run
    size_per_run = float(ev_per_run*ev_size) / _MB
    time_per_run = ev_per_run*ev_time / 3600
    return ev_per_run, n_runs, size_per_run, time_per_run

def get_db_results(key):
    sk = copy.copy(key)
    ek = copy.copy(key)
    sk.append(None)
    ek.append("zzzzzzz")
    rows = db.db.view("_design/benchmark/_view/results", startkey=sk, endkey=ek, reduce=False)
    if len(rows)!=1:
        if len(rows)>1:
            print "ARGH, too many rows!", key
            print len(rows)
        return None, None, None
    for row in rows:
        if row.value["state"]=="completed":
            if "requested" in row.value:
                return row.value["event_size"], row.value["event_time"]["Total"], row.value["requested"]
            else:
                return None, None, None
        else:
            print "Job failed!", key
            return None, None, None

def class_from_mac(fname):
    class_name = fname[:-4] # remove .mac suffix
    return caps(class_name)

def caps(fname):
    fbits = fname.split('_')
    class_name = fbits[0].capitalize()
    for i in fbits[1:]:
        class_name = '%s_%s'%(class_name, i.capitalize())
    return class_name

def check_required(options):
    if not options.sw:
        return -1
    return 0

if __name__=="__main__":
    parser = optparse.OptionParser(usage="Default options given in brackets")
    parser.add_option("-n", dest="name", default="bench",
                      help="Database name, (bench)")
    parser.add_option("-s", dest="server", default="http://couchdb.ph.liv.ac.uk:5984",
                      help="Database server (http://couchdb.ph.liv.ac.uk:5984")
    parser.add_option("-v", dest="ratv", default="dev",
                      help="RAT version (dev)")
    parser.add_option("-r", dest="sw",
                      help="Snoing install directory (MUST define)")
    (options, args) = parser.parse_args()
    if check_required(options):
        parser.print_help()
        sys.exit(1)
    water_out = "water.js"
    solar_out = "solar.js"
    te_out = "teloaded.js"
    basedir = os.path.join(os.path.expanduser(options.sw), 'rat-%s/mac/production'%options.ratv)
    rat_version = options.ratv
    db = Database.Database(options.server, options.name,
                           raw_input("DB Username: "),
                           getpass.getpass("DB Password: "))
    get_n_events_water(water_out, rat_version)
    get_n_events_solar(solar_out, rat_version)
    get_n_events_te(te_out, rat_version)
