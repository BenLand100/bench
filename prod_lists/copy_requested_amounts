#!/usr/bin/env python
##########################
#
# copy_requested_amounts:
#
# Copy the number of events requested
# for RAT V X to RAT V Y
#
##########################

import Database
import optparse
import getpass

def copy_requests(db, phase, v_x, v_y):
    """Copy the requests for rat v_x to rat v_y for given phase
    """
    start_key = [v_x, phase]
    end_key = [v_x, phase+"_"]
    rows_x = db.db.view("_design/benchmark/_view/results",
                        startkey=start_key, endkey=end_key,
                        reduce=False)
    doc = None
    current_id = None
    for row_x in rows_x:
        if "requested" not in row_x.value:
            continue
        #row_x.key[3] is the commit hash, assume null for now!
        key_y = [v_y, phase, row_x.key[2], row_x.key[3]]
        rows_y = db.db.view("_design/benchmark/_view/results",
                            key=key_y, reduce=False)
        if len(rows_y)!=1:
            #either too many or too few
            continue
        for row_y in rows_y:
            #if we need to open a new doc:
            if row_y.id!=current_id:
                #first save the old doc
                if doc is not None:
                    db.db.save(doc)
                #now open the new doc
                doc = db.db[row_y.id]
            amend = True
            if "requested" in doc["info"][row_x.key[2]]:
                #are we sure we want to amend?
                val = raw_input("Current request for %s: %d, update to %d? [y/N]: " % (row_x.key[2], doc["info"][row_x.key[2]]["requested"],
                                                                                       row_x.value["requested"]))
                if val=="y" or val=="Y":
                    amend = True
                else:
                    print "not updating"
                    amend = False
            if amend is True:
                print "update", key_y
                doc["info"][row_x.key[2]]["requested"] = row_x.value["requested"]
    #finally, save the doc
    if doc is not None:
        db.db.save(doc)
    
if __name__=="__main__":
    parser = optparse.OptionParser()
    parser.add_option("-x", dest="version1", help="The initial version")
    parser.add_option("-y", dest="version2", help="The new version")
    parser.add_option("-s", dest="server", help="DB server [http://couchdb.ph.liv.ac.uk:5984",
                      default="http://couchdb.ph.liv.ac.uk:5984")
    parser.add_option("-n", dest="name", help="DB name [bench]", default="bench")
    (options, args) = parser.parse_args()
    if not options.version1 or not options.version2:
        parser.print_help()
        raise Exception("Must define v1 and v2 of RAT")
    db = Database.Database(options.server,options.name,
                           raw_input("DB Username: "),
                           getpass.getpass("DB Password: "))
    # assume solar, teloaded and water phase only 
    #copy_requests(db, "water", options.version1, options.version2)
    #copy_requests(db, "solar", options.version1, options.version2)
    copy_requests(db, "teloaded", options.version1, options.version2)
    
